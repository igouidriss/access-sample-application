import { TestBed } from '@angular/core/testing';

import { sampleWithRequiredData, sampleWithNewData } from '../table-2.test-samples';

import { Table2FormService } from './table-2-form.service';

describe('Table2 Form Service', () => {
  let service: Table2FormService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(Table2FormService);
  });

  describe('Service methods', () => {
    describe('createTable2FormGroup', () => {
      it('should create a new form with FormControl', () => {
        const formGroup = service.createTable2FormGroup();

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
            id: expect.any(Object),
            numLigne1: expect.any(Object),
            resort2: expect.any(Object),
            resvNameId3: expect.any(Object),
            clientOId4: expect.any(Object),
            typeChb5: expect.any(Object),
            confirmationNo6: expect.any(Object),
            clientMdmId7: expect.any(Object),
            nameId8: expect.any(Object),
            parentResvNameId9: expect.any(Object),
            contactId10: expect.any(Object),
            agenceId11: expect.any(Object),
            agenceNom12: expect.any(Object),
            societeId13: expect.any(Object),
            groupeId14: expect.any(Object),
            numBloc15: expect.any(Object),
            typeResv16: expect.any(Object),
            statutResv17: expect.any(Object),
            dateDebutResv18: expect.any(Object),
            dateFinResv19: expect.any(Object),
            truncDateDebutResv20: expect.any(Object),
            truncDateFinResv21: expect.any(Object),
            dateAnnResv22: expect.any(Object),
            pseudoRoomYn23: expect.any(Object),
            createurResv24: expect.any(Object),
            nomCreateurResv25: expect.any(Object),
            codeGarantie26: expect.any(Object),
            flgDed27: expect.any(Object),
            codePays28: expect.any(Object),
            libPays29: expect.any(Object),
            codeNationalite30: expect.any(Object),
            libNationalite31: expect.any(Object),
            codeSource32: expect.any(Object),
            libSource33: expect.any(Object),
            codeGrandSource34: expect.any(Object),
            codeOrigine35: expect.any(Object),
            libOrigine36: expect.any(Object),
            codeMarche37: expect.any(Object),
            libMarche38: expect.any(Object),
            codeGrandMarche39: expect.any(Object),
            libGrandMarche40: expect.any(Object),
            codePrix41: expect.any(Object),
            categPrix42: expect.any(Object),
            libPrix43: expect.any(Object),
            numChb44: expect.any(Object),
            descriptionTypeChb45: expect.any(Object),
            codeTypeChb46: expect.any(Object),
            classChb47: expect.any(Object),
            caractChb48: expect.any(Object),
            typeChbDeReservation49: expect.any(Object),
            descriptionTypeChbDeResv50: expect.any(Object),
            codeTypeChbDeResv51: expect.any(Object),
            statutDeReservation52: expect.any(Object),
            circuitDistribution53: expect.any(Object),
            circuitDistribUserRegroup54: expect.any(Object),
            numCrs55: expect.any(Object),
            typeRefCrs56: expect.any(Object),
            crsInsertDate57: expect.any(Object),
            dateCreaResv58: expect.any(Object),
            datePremier59: expect.any(Object),
            statutPremier60: expect.any(Object),
            dateDernier61: expect.any(Object),
            statutDernier62: expect.any(Object),
            dateDernierPseudo63: expect.any(Object),
            statutDernierPseudo64: expect.any(Object),
            diffDtCreaAnn65: expect.any(Object),
            diffDtArrAnn66: expect.any(Object),
            leadtime67: expect.any(Object),
            los68: expect.any(Object),
            occupantsGroupe69: expect.any(Object),
            nbNuitee70: expect.any(Object),
            nbNuiteeNnDed71: expect.any(Object),
            nbResvAnn72: expect.any(Object),
            nbAdu73: expect.any(Object),
            nbEnf74: expect.any(Object),
            nbPersDayU75: expect.any(Object),
            nbPersArr76: expect.any(Object),
            nbPersDep77: expect.any(Object),
            nbPersAnn78: expect.any(Object),
            nbPersNoshow79: expect.any(Object),
            nbChbDayU80: expect.any(Object),
            nbChbArr81: expect.any(Object),
            nbChbDep82: expect.any(Object),
            nbChbAnn83: expect.any(Object),
            nbChbNoshow84: expect.any(Object),
            revenuNetChambre85: expect.any(Object),
            revenuTaxeChambre86: expect.any(Object),
            revenuNetChambreGlobal87: expect.any(Object),
            revenuTaxeChambreGlobal88: expect.any(Object),
            revenuNetBq89: expect.any(Object),
            revenuTaxeBq90: expect.any(Object),
            revenuNetBqGlobal91: expect.any(Object),
            revenuTaxeBqGlobal92: expect.any(Object),
            revenuNetExtra93: expect.any(Object),
            revenuTaxeExtra94: expect.any(Object),
            revenuNetExtraGlobal95: expect.any(Object),
            revenuTaxeExtraGlobal96: expect.any(Object),
            revenuNetTotal97: expect.any(Object),
            revenuTaxeTotal98: expect.any(Object),
            revenuNetTotalGlobal99: expect.any(Object),
            revenuTaxeTotalGlobal100: expect.any(Object),
            prodRevenuChambre101: expect.any(Object),
            prodRevenuBq102: expect.any(Object),
            prodRevenuExtra103: expect.any(Object),
            prodRevenuTotal104: expect.any(Object),
            prodChambreNbNuitees105: expect.any(Object),
            techCreateDate106: expect.any(Object),
            techUpdateDate107: expect.any(Object),
            numLigne108: expect.any(Object),
            resort109: expect.any(Object),
            resvNameId110: expect.any(Object),
            clientOId111: expect.any(Object),
            typeChb112: expect.any(Object),
            confirmationNo113: expect.any(Object),
            clientMdmId114: expect.any(Object),
            nameId115: expect.any(Object),
            parentResvNameId116: expect.any(Object),
            contactId117: expect.any(Object),
            agenceId118: expect.any(Object),
            agenceNom119: expect.any(Object),
            societeId120: expect.any(Object),
            groupeId121: expect.any(Object),
            numBloc122: expect.any(Object),
            typeResv123: expect.any(Object),
            statutResv124: expect.any(Object),
            dateDebutResv125: expect.any(Object),
            dateFinResv126: expect.any(Object),
            truncDateDebutResv127: expect.any(Object),
            truncDateFinResv128: expect.any(Object),
            dateAnnResv129: expect.any(Object),
            pseudoRoomYn130: expect.any(Object),
            createurResv131: expect.any(Object),
            nomCreateurResv132: expect.any(Object),
            codeGarantie133: expect.any(Object),
            flgDed134: expect.any(Object),
            codePays135: expect.any(Object),
            libPays136: expect.any(Object),
            codeNationalite137: expect.any(Object),
            libNationalite138: expect.any(Object),
            codeSource139: expect.any(Object),
            libSource140: expect.any(Object),
            codeGrandSource141: expect.any(Object),
            codeOrigine142: expect.any(Object),
            libOrigine143: expect.any(Object),
            codeMarche144: expect.any(Object),
            libMarche145: expect.any(Object),
            codeGrandMarche146: expect.any(Object),
            libGrandMarche147: expect.any(Object),
            codePrix148: expect.any(Object),
            categPrix149: expect.any(Object),
            libPrix150: expect.any(Object),
            numChb151: expect.any(Object),
            descriptionTypeChb152: expect.any(Object),
            codeTypeChb153: expect.any(Object),
            classChb154: expect.any(Object),
            caractChb155: expect.any(Object),
            typeChbDeReservation156: expect.any(Object),
            descriptionTypeChbDeResv157: expect.any(Object),
            codeTypeChbDeResv158: expect.any(Object),
            statutDeReservation159: expect.any(Object),
            circuitDistribution160: expect.any(Object),
            circuitDistribUserRegroup161: expect.any(Object),
            numCrs162: expect.any(Object),
            typeRefCrs163: expect.any(Object),
            crsInsertDate164: expect.any(Object),
            dateCreaResv165: expect.any(Object),
            datePremier166: expect.any(Object),
            statutPremier167: expect.any(Object),
            dateDernier168: expect.any(Object),
            statutDernier169: expect.any(Object),
            dateDernierPseudo170: expect.any(Object),
            statutDernierPseudo171: expect.any(Object),
            diffDtCreaAnn172: expect.any(Object),
            diffDtArrAnn173: expect.any(Object),
            leadtime174: expect.any(Object),
            los175: expect.any(Object),
            occupantsGroupe176: expect.any(Object),
            nbNuitee177: expect.any(Object),
            nbNuiteeNnDed178: expect.any(Object),
            nbResvAnn179: expect.any(Object),
            nbAdu180: expect.any(Object),
            nbEnf181: expect.any(Object),
            nbPersDayU182: expect.any(Object),
            nbPersArr183: expect.any(Object),
            nbPersDep184: expect.any(Object),
            nbPersAnn185: expect.any(Object),
            nbPersNoshow186: expect.any(Object),
            nbChbDayU187: expect.any(Object),
            nbChbArr188: expect.any(Object),
            nbChbDep189: expect.any(Object),
            nbChbAnn190: expect.any(Object),
            nbChbNoshow191: expect.any(Object),
            revenuNetChambre192: expect.any(Object),
            revenuTaxeChambre193: expect.any(Object),
            revenuNetChambreGlobal194: expect.any(Object),
            revenuTaxeChambreGlobal195: expect.any(Object),
            revenuNetBq196: expect.any(Object),
            revenuTaxeBq197: expect.any(Object),
            revenuNetBqGlobal198: expect.any(Object),
            revenuTaxeBqGlobal199: expect.any(Object),
            revenuNetExtra200: expect.any(Object),
            revenuTaxeExtra201: expect.any(Object),
            revenuNetExtraGlobal202: expect.any(Object),
            revenuTaxeExtraGlobal203: expect.any(Object),
            revenuNetTotal204: expect.any(Object),
            revenuTaxeTotal205: expect.any(Object),
            revenuNetTotalGlobal206: expect.any(Object),
            revenuTaxeTotalGlobal207: expect.any(Object),
            prodRevenuChambre208: expect.any(Object),
            prodRevenuBq209: expect.any(Object),
            prodRevenuExtra210: expect.any(Object),
            prodRevenuTotal211: expect.any(Object),
            prodChambreNbNuitees212: expect.any(Object),
            techCreateDate213: expect.any(Object),
            techUpdateDate214: expect.any(Object),
            numLigne215: expect.any(Object),
            resort216: expect.any(Object),
            resvNameId217: expect.any(Object),
            clientOId218: expect.any(Object),
            typeChb219: expect.any(Object),
            confirmationNo220: expect.any(Object),
            clientMdmId221: expect.any(Object),
            nameId222: expect.any(Object),
            parentResvNameId223: expect.any(Object),
            contactId224: expect.any(Object),
            agenceId225: expect.any(Object),
            agenceNom226: expect.any(Object),
            societeId227: expect.any(Object),
            groupeId228: expect.any(Object),
            numBloc229: expect.any(Object),
            typeResv230: expect.any(Object),
            statutResv231: expect.any(Object),
            dateDebutResv232: expect.any(Object),
            dateFinResv233: expect.any(Object),
            truncDateDebutResv234: expect.any(Object),
            truncDateFinResv235: expect.any(Object),
            dateAnnResv236: expect.any(Object),
            pseudoRoomYn237: expect.any(Object),
            createurResv238: expect.any(Object),
            nomCreateurResv239: expect.any(Object),
            codeGarantie240: expect.any(Object),
            flgDed241: expect.any(Object),
            codePays242: expect.any(Object),
            libPays243: expect.any(Object),
            codeNationalite244: expect.any(Object),
            libNationalite245: expect.any(Object),
            codeSource246: expect.any(Object),
            libSource247: expect.any(Object),
            codeGrandSource248: expect.any(Object),
            codeOrigine249: expect.any(Object),
            libOrigine250: expect.any(Object),
            codeMarche251: expect.any(Object),
            libMarche252: expect.any(Object),
            codeGrandMarche253: expect.any(Object),
            libGrandMarche254: expect.any(Object),
            codePrix255: expect.any(Object),
            categPrix256: expect.any(Object),
            libPrix257: expect.any(Object),
            numChb258: expect.any(Object),
            descriptionTypeChb259: expect.any(Object),
            codeTypeChb260: expect.any(Object),
            classChb261: expect.any(Object),
            caractChb262: expect.any(Object),
            typeChbDeReservation263: expect.any(Object),
            descriptionTypeChbDeResv264: expect.any(Object),
            codeTypeChbDeResv265: expect.any(Object),
            statutDeReservation266: expect.any(Object),
            circuitDistribution267: expect.any(Object),
            circuitDistribUserRegroup268: expect.any(Object),
            numCrs269: expect.any(Object),
            typeRefCrs270: expect.any(Object),
            crsInsertDate271: expect.any(Object),
            dateCreaResv272: expect.any(Object),
            datePremier273: expect.any(Object),
            statutPremier274: expect.any(Object),
            dateDernier275: expect.any(Object),
            statutDernier276: expect.any(Object),
            dateDernierPseudo277: expect.any(Object),
            statutDernierPseudo278: expect.any(Object),
            diffDtCreaAnn279: expect.any(Object),
            diffDtArrAnn280: expect.any(Object),
            leadtime281: expect.any(Object),
            los282: expect.any(Object),
            occupantsGroupe283: expect.any(Object),
            nbNuitee284: expect.any(Object),
            nbNuiteeNnDed285: expect.any(Object),
            nbResvAnn286: expect.any(Object),
            nbAdu287: expect.any(Object),
            nbEnf288: expect.any(Object),
            nbPersDayU289: expect.any(Object),
            nbPersArr290: expect.any(Object),
            nbPersDep291: expect.any(Object),
            nbPersAnn292: expect.any(Object),
            nbPersNoshow293: expect.any(Object),
            nbChbDayU294: expect.any(Object),
            nbChbArr295: expect.any(Object),
            nbChbDep296: expect.any(Object),
            nbChbAnn297: expect.any(Object),
            nbChbNoshow298: expect.any(Object),
            revenuNetChambre299: expect.any(Object),
            revenuTaxeChambre300: expect.any(Object),
            revenuNetChambreGlobal301: expect.any(Object),
            revenuTaxeChambreGlobal302: expect.any(Object),
            revenuNetBq303: expect.any(Object),
            revenuTaxeBq304: expect.any(Object),
            revenuNetBqGlobal305: expect.any(Object),
            revenuTaxeBqGlobal306: expect.any(Object),
            revenuNetExtra307: expect.any(Object),
            revenuTaxeExtra308: expect.any(Object),
            revenuNetExtraGlobal309: expect.any(Object),
            revenuTaxeExtraGlobal310: expect.any(Object),
          }),
        );
      });

      it('passing ITable2 should create a new form with FormGroup', () => {
        const formGroup = service.createTable2FormGroup(sampleWithRequiredData);

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
            id: expect.any(Object),
            numLigne1: expect.any(Object),
            resort2: expect.any(Object),
            resvNameId3: expect.any(Object),
            clientOId4: expect.any(Object),
            typeChb5: expect.any(Object),
            confirmationNo6: expect.any(Object),
            clientMdmId7: expect.any(Object),
            nameId8: expect.any(Object),
            parentResvNameId9: expect.any(Object),
            contactId10: expect.any(Object),
            agenceId11: expect.any(Object),
            agenceNom12: expect.any(Object),
            societeId13: expect.any(Object),
            groupeId14: expect.any(Object),
            numBloc15: expect.any(Object),
            typeResv16: expect.any(Object),
            statutResv17: expect.any(Object),
            dateDebutResv18: expect.any(Object),
            dateFinResv19: expect.any(Object),
            truncDateDebutResv20: expect.any(Object),
            truncDateFinResv21: expect.any(Object),
            dateAnnResv22: expect.any(Object),
            pseudoRoomYn23: expect.any(Object),
            createurResv24: expect.any(Object),
            nomCreateurResv25: expect.any(Object),
            codeGarantie26: expect.any(Object),
            flgDed27: expect.any(Object),
            codePays28: expect.any(Object),
            libPays29: expect.any(Object),
            codeNationalite30: expect.any(Object),
            libNationalite31: expect.any(Object),
            codeSource32: expect.any(Object),
            libSource33: expect.any(Object),
            codeGrandSource34: expect.any(Object),
            codeOrigine35: expect.any(Object),
            libOrigine36: expect.any(Object),
            codeMarche37: expect.any(Object),
            libMarche38: expect.any(Object),
            codeGrandMarche39: expect.any(Object),
            libGrandMarche40: expect.any(Object),
            codePrix41: expect.any(Object),
            categPrix42: expect.any(Object),
            libPrix43: expect.any(Object),
            numChb44: expect.any(Object),
            descriptionTypeChb45: expect.any(Object),
            codeTypeChb46: expect.any(Object),
            classChb47: expect.any(Object),
            caractChb48: expect.any(Object),
            typeChbDeReservation49: expect.any(Object),
            descriptionTypeChbDeResv50: expect.any(Object),
            codeTypeChbDeResv51: expect.any(Object),
            statutDeReservation52: expect.any(Object),
            circuitDistribution53: expect.any(Object),
            circuitDistribUserRegroup54: expect.any(Object),
            numCrs55: expect.any(Object),
            typeRefCrs56: expect.any(Object),
            crsInsertDate57: expect.any(Object),
            dateCreaResv58: expect.any(Object),
            datePremier59: expect.any(Object),
            statutPremier60: expect.any(Object),
            dateDernier61: expect.any(Object),
            statutDernier62: expect.any(Object),
            dateDernierPseudo63: expect.any(Object),
            statutDernierPseudo64: expect.any(Object),
            diffDtCreaAnn65: expect.any(Object),
            diffDtArrAnn66: expect.any(Object),
            leadtime67: expect.any(Object),
            los68: expect.any(Object),
            occupantsGroupe69: expect.any(Object),
            nbNuitee70: expect.any(Object),
            nbNuiteeNnDed71: expect.any(Object),
            nbResvAnn72: expect.any(Object),
            nbAdu73: expect.any(Object),
            nbEnf74: expect.any(Object),
            nbPersDayU75: expect.any(Object),
            nbPersArr76: expect.any(Object),
            nbPersDep77: expect.any(Object),
            nbPersAnn78: expect.any(Object),
            nbPersNoshow79: expect.any(Object),
            nbChbDayU80: expect.any(Object),
            nbChbArr81: expect.any(Object),
            nbChbDep82: expect.any(Object),
            nbChbAnn83: expect.any(Object),
            nbChbNoshow84: expect.any(Object),
            revenuNetChambre85: expect.any(Object),
            revenuTaxeChambre86: expect.any(Object),
            revenuNetChambreGlobal87: expect.any(Object),
            revenuTaxeChambreGlobal88: expect.any(Object),
            revenuNetBq89: expect.any(Object),
            revenuTaxeBq90: expect.any(Object),
            revenuNetBqGlobal91: expect.any(Object),
            revenuTaxeBqGlobal92: expect.any(Object),
            revenuNetExtra93: expect.any(Object),
            revenuTaxeExtra94: expect.any(Object),
            revenuNetExtraGlobal95: expect.any(Object),
            revenuTaxeExtraGlobal96: expect.any(Object),
            revenuNetTotal97: expect.any(Object),
            revenuTaxeTotal98: expect.any(Object),
            revenuNetTotalGlobal99: expect.any(Object),
            revenuTaxeTotalGlobal100: expect.any(Object),
            prodRevenuChambre101: expect.any(Object),
            prodRevenuBq102: expect.any(Object),
            prodRevenuExtra103: expect.any(Object),
            prodRevenuTotal104: expect.any(Object),
            prodChambreNbNuitees105: expect.any(Object),
            techCreateDate106: expect.any(Object),
            techUpdateDate107: expect.any(Object),
            numLigne108: expect.any(Object),
            resort109: expect.any(Object),
            resvNameId110: expect.any(Object),
            clientOId111: expect.any(Object),
            typeChb112: expect.any(Object),
            confirmationNo113: expect.any(Object),
            clientMdmId114: expect.any(Object),
            nameId115: expect.any(Object),
            parentResvNameId116: expect.any(Object),
            contactId117: expect.any(Object),
            agenceId118: expect.any(Object),
            agenceNom119: expect.any(Object),
            societeId120: expect.any(Object),
            groupeId121: expect.any(Object),
            numBloc122: expect.any(Object),
            typeResv123: expect.any(Object),
            statutResv124: expect.any(Object),
            dateDebutResv125: expect.any(Object),
            dateFinResv126: expect.any(Object),
            truncDateDebutResv127: expect.any(Object),
            truncDateFinResv128: expect.any(Object),
            dateAnnResv129: expect.any(Object),
            pseudoRoomYn130: expect.any(Object),
            createurResv131: expect.any(Object),
            nomCreateurResv132: expect.any(Object),
            codeGarantie133: expect.any(Object),
            flgDed134: expect.any(Object),
            codePays135: expect.any(Object),
            libPays136: expect.any(Object),
            codeNationalite137: expect.any(Object),
            libNationalite138: expect.any(Object),
            codeSource139: expect.any(Object),
            libSource140: expect.any(Object),
            codeGrandSource141: expect.any(Object),
            codeOrigine142: expect.any(Object),
            libOrigine143: expect.any(Object),
            codeMarche144: expect.any(Object),
            libMarche145: expect.any(Object),
            codeGrandMarche146: expect.any(Object),
            libGrandMarche147: expect.any(Object),
            codePrix148: expect.any(Object),
            categPrix149: expect.any(Object),
            libPrix150: expect.any(Object),
            numChb151: expect.any(Object),
            descriptionTypeChb152: expect.any(Object),
            codeTypeChb153: expect.any(Object),
            classChb154: expect.any(Object),
            caractChb155: expect.any(Object),
            typeChbDeReservation156: expect.any(Object),
            descriptionTypeChbDeResv157: expect.any(Object),
            codeTypeChbDeResv158: expect.any(Object),
            statutDeReservation159: expect.any(Object),
            circuitDistribution160: expect.any(Object),
            circuitDistribUserRegroup161: expect.any(Object),
            numCrs162: expect.any(Object),
            typeRefCrs163: expect.any(Object),
            crsInsertDate164: expect.any(Object),
            dateCreaResv165: expect.any(Object),
            datePremier166: expect.any(Object),
            statutPremier167: expect.any(Object),
            dateDernier168: expect.any(Object),
            statutDernier169: expect.any(Object),
            dateDernierPseudo170: expect.any(Object),
            statutDernierPseudo171: expect.any(Object),
            diffDtCreaAnn172: expect.any(Object),
            diffDtArrAnn173: expect.any(Object),
            leadtime174: expect.any(Object),
            los175: expect.any(Object),
            occupantsGroupe176: expect.any(Object),
            nbNuitee177: expect.any(Object),
            nbNuiteeNnDed178: expect.any(Object),
            nbResvAnn179: expect.any(Object),
            nbAdu180: expect.any(Object),
            nbEnf181: expect.any(Object),
            nbPersDayU182: expect.any(Object),
            nbPersArr183: expect.any(Object),
            nbPersDep184: expect.any(Object),
            nbPersAnn185: expect.any(Object),
            nbPersNoshow186: expect.any(Object),
            nbChbDayU187: expect.any(Object),
            nbChbArr188: expect.any(Object),
            nbChbDep189: expect.any(Object),
            nbChbAnn190: expect.any(Object),
            nbChbNoshow191: expect.any(Object),
            revenuNetChambre192: expect.any(Object),
            revenuTaxeChambre193: expect.any(Object),
            revenuNetChambreGlobal194: expect.any(Object),
            revenuTaxeChambreGlobal195: expect.any(Object),
            revenuNetBq196: expect.any(Object),
            revenuTaxeBq197: expect.any(Object),
            revenuNetBqGlobal198: expect.any(Object),
            revenuTaxeBqGlobal199: expect.any(Object),
            revenuNetExtra200: expect.any(Object),
            revenuTaxeExtra201: expect.any(Object),
            revenuNetExtraGlobal202: expect.any(Object),
            revenuTaxeExtraGlobal203: expect.any(Object),
            revenuNetTotal204: expect.any(Object),
            revenuTaxeTotal205: expect.any(Object),
            revenuNetTotalGlobal206: expect.any(Object),
            revenuTaxeTotalGlobal207: expect.any(Object),
            prodRevenuChambre208: expect.any(Object),
            prodRevenuBq209: expect.any(Object),
            prodRevenuExtra210: expect.any(Object),
            prodRevenuTotal211: expect.any(Object),
            prodChambreNbNuitees212: expect.any(Object),
            techCreateDate213: expect.any(Object),
            techUpdateDate214: expect.any(Object),
            numLigne215: expect.any(Object),
            resort216: expect.any(Object),
            resvNameId217: expect.any(Object),
            clientOId218: expect.any(Object),
            typeChb219: expect.any(Object),
            confirmationNo220: expect.any(Object),
            clientMdmId221: expect.any(Object),
            nameId222: expect.any(Object),
            parentResvNameId223: expect.any(Object),
            contactId224: expect.any(Object),
            agenceId225: expect.any(Object),
            agenceNom226: expect.any(Object),
            societeId227: expect.any(Object),
            groupeId228: expect.any(Object),
            numBloc229: expect.any(Object),
            typeResv230: expect.any(Object),
            statutResv231: expect.any(Object),
            dateDebutResv232: expect.any(Object),
            dateFinResv233: expect.any(Object),
            truncDateDebutResv234: expect.any(Object),
            truncDateFinResv235: expect.any(Object),
            dateAnnResv236: expect.any(Object),
            pseudoRoomYn237: expect.any(Object),
            createurResv238: expect.any(Object),
            nomCreateurResv239: expect.any(Object),
            codeGarantie240: expect.any(Object),
            flgDed241: expect.any(Object),
            codePays242: expect.any(Object),
            libPays243: expect.any(Object),
            codeNationalite244: expect.any(Object),
            libNationalite245: expect.any(Object),
            codeSource246: expect.any(Object),
            libSource247: expect.any(Object),
            codeGrandSource248: expect.any(Object),
            codeOrigine249: expect.any(Object),
            libOrigine250: expect.any(Object),
            codeMarche251: expect.any(Object),
            libMarche252: expect.any(Object),
            codeGrandMarche253: expect.any(Object),
            libGrandMarche254: expect.any(Object),
            codePrix255: expect.any(Object),
            categPrix256: expect.any(Object),
            libPrix257: expect.any(Object),
            numChb258: expect.any(Object),
            descriptionTypeChb259: expect.any(Object),
            codeTypeChb260: expect.any(Object),
            classChb261: expect.any(Object),
            caractChb262: expect.any(Object),
            typeChbDeReservation263: expect.any(Object),
            descriptionTypeChbDeResv264: expect.any(Object),
            codeTypeChbDeResv265: expect.any(Object),
            statutDeReservation266: expect.any(Object),
            circuitDistribution267: expect.any(Object),
            circuitDistribUserRegroup268: expect.any(Object),
            numCrs269: expect.any(Object),
            typeRefCrs270: expect.any(Object),
            crsInsertDate271: expect.any(Object),
            dateCreaResv272: expect.any(Object),
            datePremier273: expect.any(Object),
            statutPremier274: expect.any(Object),
            dateDernier275: expect.any(Object),
            statutDernier276: expect.any(Object),
            dateDernierPseudo277: expect.any(Object),
            statutDernierPseudo278: expect.any(Object),
            diffDtCreaAnn279: expect.any(Object),
            diffDtArrAnn280: expect.any(Object),
            leadtime281: expect.any(Object),
            los282: expect.any(Object),
            occupantsGroupe283: expect.any(Object),
            nbNuitee284: expect.any(Object),
            nbNuiteeNnDed285: expect.any(Object),
            nbResvAnn286: expect.any(Object),
            nbAdu287: expect.any(Object),
            nbEnf288: expect.any(Object),
            nbPersDayU289: expect.any(Object),
            nbPersArr290: expect.any(Object),
            nbPersDep291: expect.any(Object),
            nbPersAnn292: expect.any(Object),
            nbPersNoshow293: expect.any(Object),
            nbChbDayU294: expect.any(Object),
            nbChbArr295: expect.any(Object),
            nbChbDep296: expect.any(Object),
            nbChbAnn297: expect.any(Object),
            nbChbNoshow298: expect.any(Object),
            revenuNetChambre299: expect.any(Object),
            revenuTaxeChambre300: expect.any(Object),
            revenuNetChambreGlobal301: expect.any(Object),
            revenuTaxeChambreGlobal302: expect.any(Object),
            revenuNetBq303: expect.any(Object),
            revenuTaxeBq304: expect.any(Object),
            revenuNetBqGlobal305: expect.any(Object),
            revenuTaxeBqGlobal306: expect.any(Object),
            revenuNetExtra307: expect.any(Object),
            revenuTaxeExtra308: expect.any(Object),
            revenuNetExtraGlobal309: expect.any(Object),
            revenuTaxeExtraGlobal310: expect.any(Object),
          }),
        );
      });
    });

    describe('getTable2', () => {
      it('should return NewTable2 for default Table2 initial value', () => {
        const formGroup = service.createTable2FormGroup(sampleWithNewData);

        const table2 = service.getTable2(formGroup) as any;

        expect(table2).toMatchObject(sampleWithNewData);
      });

      it('should return NewTable2 for empty Table2 initial value', () => {
        const formGroup = service.createTable2FormGroup();

        const table2 = service.getTable2(formGroup) as any;

        expect(table2).toMatchObject({});
      });

      it('should return ITable2', () => {
        const formGroup = service.createTable2FormGroup(sampleWithRequiredData);

        const table2 = service.getTable2(formGroup) as any;

        expect(table2).toMatchObject(sampleWithRequiredData);
      });
    });

    describe('resetForm', () => {
      it('passing ITable2 should not enable id FormControl', () => {
        const formGroup = service.createTable2FormGroup();
        expect(formGroup.controls.id.disabled).toBe(true);

        service.resetForm(formGroup, sampleWithRequiredData);

        expect(formGroup.controls.id.disabled).toBe(true);
      });

      it('passing NewTable2 should disable id FormControl', () => {
        const formGroup = service.createTable2FormGroup(sampleWithRequiredData);
        expect(formGroup.controls.id.disabled).toBe(true);

        service.resetForm(formGroup, { id: null });

        expect(formGroup.controls.id.disabled).toBe(true);
      });
    });
  });
});
